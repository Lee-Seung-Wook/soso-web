[{"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\index.js":"1","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\App.js":"2","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\reportWebVitals.js":"3","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\store\\store.js":"4","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Main.js":"5","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Login.js":"6","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect.js":"7","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect2.js":"8","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Send.js":"9","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ModalStory.js":"10","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\InnerPage.js":"11","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Menu.js":"12","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ShareBt.js":"13","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Restart.js":"14","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Refresh.js":"15"},{"size":768,"mtime":1680264173141,"results":"16","hashOfConfig":"17"},{"size":3228,"mtime":1683640358964,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1669628232649,"results":"19","hashOfConfig":"17"},{"size":8445,"mtime":1683632210682,"results":"20","hashOfConfig":"17"},{"size":2955,"mtime":1683632677045,"results":"21","hashOfConfig":"17"},{"size":53189,"mtime":1683640280148,"results":"22","hashOfConfig":"17"},{"size":9287,"mtime":1683640319820,"results":"23","hashOfConfig":"17"},{"size":1723,"mtime":1683633016635,"results":"24","hashOfConfig":"17"},{"size":91113,"mtime":1683640352663,"results":"25","hashOfConfig":"17"},{"size":4724,"mtime":1683632858197,"results":"26","hashOfConfig":"17"},{"size":47819,"mtime":1683632561884,"results":"27","hashOfConfig":"17"},{"size":75117,"mtime":1683640304464,"results":"28","hashOfConfig":"17"},{"size":5950,"mtime":1683640340897,"results":"29","hashOfConfig":"17"},{"size":3263,"mtime":1683633056957,"results":"30","hashOfConfig":"17"},{"size":2226,"mtime":1683633039559,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1y7gww7",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\index.js",[],[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\App.js",["80"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\reportWebVitals.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\store\\store.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Main.js",["81"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport './Main.css';\r\nimport ModalStory from './ModalStory';\r\nimport Menu from './Menu';\r\nimport InnerPage from './InnerPage';\r\n\r\nfunction Main() {\r\n  const [render1, setRender1] = useState(0);\r\n  const navigater = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const isStory = useSelector((state) => state.isStory);\r\n  const userID = useSelector((state) => state.userID);\r\n  // \r\n  const ShareUserID = useSelector((state) => state.ShareUserID);\r\n  // \r\n  // (랜더링 직후) 사용자 쿠키 확인 기능 + 서버로 log 정보 보내는 기능\r\n  useEffect(() => {\r\n    const cookieData = document.cookie.split(';');\r\n    for (let i = 0; i < cookieData.length; i++) {\r\n      if (cookieData[i].indexOf('pl@ter') > -1) {\r\n        dispatch({ type: 'CHANGE_ISSTORY', data: !isStory });\r\n      } else break;\r\n    };\r\n    fetch(`${process.env.REACT_APP_REGISTER_LOG}main`, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(() => {\r\n      })\r\n      .catch((error) => {\r\n      });\r\n    if (userID === null) {\r\n      navigater('/web/login');\r\n      // navigater('/login');\r\n    };\r\n  }, [dispatch]);\r\n\r\n  // 쿠키 삭제 기능\r\n  function delCookie() {\r\n    alert('사용자의 쿠키 중 pl@ter를 삭제했습니다.');\r\n    const expires = new Date();\r\n    expires.setDate(expires.getDate() - 1);\r\n    const expiresDate = expires.toUTCString();\r\n    let setCookie = '';\r\n    setCookie += 'pl@ter=190301;';\r\n    setCookie += 'Expires=' + expiresDate;\r\n    document.cookie = setCookie;\r\n  };\r\n\r\n  // 편지 읽을 수 있도록 시간 조정 기능\r\n  function settingTime() {\r\n    alert('사용자의 openDate를 11일 전으로 설정했습니다.');\r\n    const now = new Date();\r\n    now.setDate(now.getDate() - 11);\r\n    dispatch({ type: 'CHANGE_OPENDATE', data: Number(now.getTime()) });\r\n    setRender1(render1 + 1);\r\n  };\r\n\r\n  return (\r\n    <div className='main_background'>\r\n      <ModalStory></ModalStory>\r\n      <Menu></Menu>\r\n      <InnerPage></InnerPage>\r\n      <NavLink end to={\"/send?userID=\" + ShareUserID} onClick={() => {\r\n      }}><img style={{ width: \"10%\", position: \"absolute\", top: \"50%\", left: \"85%\" }} alt='login' src='https://cdn-icons-png.flaticon.com/512/9072/9072392.png'></img></NavLink>\r\n      <img onClick={settingTime} style={{ width: \"10%\", position: \"absolute\", top: \"60%\", left: \"85%\" }} alt='cookie' src='https://cdn-icons-png.flaticon.com/512/896/896266.png'></img>\r\n      <img onClick={delCookie} style={{ width: \"10%\", position: \"absolute\", top: \"80%\", left: \"85%\" }} alt='cookie' src='https://cdn-icons-png.flaticon.com/512/1330/1330387.png'></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Login.js",["82"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect.js",["83"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Redirect2.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Send.js",["84","85","86","87"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ModalStory.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\InnerPage.js",["88","89","90"],[],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Slider from \"react-slick\";\r\nimport { Adsense } from '@ctrl/react-adsense';\r\n// import Typewriter from 'typewriter-effect/dist/core';\r\nimport './InnerPage.css';\r\nimport ShareBt from './ShareBt';\r\nimport Restart from './Restart';\r\nimport Refresh from './Refresh';\r\n\r\nfunction InnerPage() {\r\n    const dispatch = useDispatch();\r\n    // For component Letter box\r\n    const [render, setRender] = useState(-1);\r\n    const [slickPage, setSlickPage] = useState(0);\r\n    // 편지지 기본 설정 값\r\n    const [setStyle, setSetStyle] = useState({ 'fontSize': '', 'fontFamily': '', 'color': '', 'textAlign': '', 'backgroundImage': '' });\r\n    const userID = useSelector((state) => state.userID);\r\n    const ShareUserID = useSelector((state) => state.ShareUserID);\r\n    const userData = useSelector((state) => state.userData);\r\n    const letterData = useSelector((state) => state.letterData);\r\n    const isNamePage = useSelector((state) => state.isNamePage);\r\n    const ModalCreateUrl = useSelector((state) => state.ModalCreateUrl);\r\n    const isPopUpCopyLink = useSelector((state) => state.isPopUpCopyLink);\r\n    const isYesName = useSelector((state) => state.isYesName);\r\n    const isRestart = useSelector((state) => state.isRestart);\r\n    const isImagePreload = useSelector((state) => state.isImagePreload);\r\n    const [startBtn, setStartBtn] = useState(true);\r\n\r\n    // 사용자 개설일 확인 기능\r\n    useEffect(() => {\r\n        if (userData.openDate === 875286000000 || userData.openDate === 0) {\r\n            dispatch({ type: 'CHANGE_ISNAMEPAGE', data: false });\r\n        } else if (userData.openDate !== 875286000000 && userData.openDate !== 0) {\r\n            dispatch({ type: 'CHANGE_ISNAMEPAGE', data: true });\r\n        };\r\n    }, [dispatch, userData.openDate]);\r\n\r\n    // 신규 사용자 용 Component\r\n    function SetSignal() {\r\n        const isSendSignal = useSelector((state) => state.isSendSignal);\r\n        const [isPopUpOpenPlanet, setIsPopUpOpenPlanet] = useState(false);\r\n        const [isPopUpOpenPlanetName, setIsPopUpOpenPlanetName] = useState(false);\r\n        const [stringUserNickname, setStringUserNickname] = useState(String(userData.nickname));\r\n        const [lengthUserNickname, setLengthUserNickname] = useState(Number(userData.nickname.length));\r\n        const [startMonth, setStartMonth] = useState(null);\r\n        const [startHours, setStartHours] = useState(null);\r\n        const [endMonth, setEndMonth] = useState(null);\r\n        const [endHours, setEndHours] = useState(null);\r\n\r\n        // (팝업) 행성 개설 시 이름 기재 여부 확인\r\n        function PopUpOpenPlanetNoName() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpOpenPlanetName ? \"ispopupopenplanetnoname\" : \"ispopupopenplanetnoname_fade\"}>\r\n                        <div className='ispopupopenplanetnoname_outContainer'>\r\n                            <p className='ispopupopenplanetnoname_title'>행성 이름이 비어있습니다.</p>\r\n                            <p className='ispopupopenplanetnoname_p'>이름이 없는 행성은 조금 울적할지도 몰라요.</p>\r\n                            <div className='ispopupopenplanetnoname_innerBox'>\r\n                                <div className='ispopupopenplanetnoname_button_cancel' onClick={() => {\r\n                                    setIsPopUpOpenPlanetName(!isPopUpOpenPlanetName);\r\n                                }}>돌아가기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // (팝업) 행성 개설 안내\r\n        function PopUpOpenPlanet() {\r\n            // 공유 가능 사용자 아이디 발급 기능\r\n            async function RequestShareUserID(userID) {\r\n                setStartBtn(false);\r\n                await fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n                    method: 'GET',\r\n                    mode: 'cors',\r\n                    cache: 'no-cache',\r\n                    credentials: 'same-origin',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(res => res.json())\r\n                    .then((userData) => {\r\n                        dispatch({ type: 'CHANGE_SHAREUSERID', data: String(userData) });\r\n                    })\r\n                    .catch((error) => {\r\n                        // error 무시하고 진행, 실제 공유 가능 링크 생성 시 별도 기능 재실행 예정\r\n                    });\r\n                await sendSignal_confirm();\r\n            };\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpOpenPlanet ? \"ispopupopenplanet\" : \"ispopupopenplanet_fade\"}>\r\n                        <div className='ispopupopenplanet_outContainer'>\r\n                            <p className='ispopupopenplanet_title'>{stringUserNickname}(이)란 행성을</p>\r\n                            <p className='ispopupopenplanet_title'>개설할까요?</p>\r\n                            <p className='ispopupopenplanet_p'>행성의 이름과</p>\r\n                            <p className='ispopupopenplanet_p'>시간을 확인해주세요.</p>\r\n                            <div className='ispopupopenplanet_innerBox'>\r\n                                <div className='ispopupopenplanet_button_signOut' onClick={() => { setIsPopUpOpenPlanet(!isPopUpOpenPlanet); }}>취소</div>\r\n                                <div className='ispopupopenplanet_button_cancel' onClick={() => {\r\n                                    setIsPopUpOpenPlanet(!isPopUpOpenPlanet);\r\n                                    RequestShareUserID(userID);\r\n                                }}>개설하기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // '일' 시작 생성 기능\r\n        function settingStartMonth() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let months = now.getMonth() + 1;\r\n                let days = now.getDate();\r\n                setStartMonth(months + '-' + days);\r\n            }, 300);\r\n        };\r\n\r\n        // '시간' 시작 생성 기능\r\n        function settingStartHours() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let hours = now.getHours();\r\n                let minutes = now.getMinutes();\r\n                let seconds = now.getSeconds();\r\n                setStartHours(hours + ':' + minutes + ':' + seconds);\r\n            }, 300);\r\n        };\r\n\r\n        // '일' 마감 생성 기능\r\n        function settingEndtMonth() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                now.setDate(now.getDate() + 10)\r\n                let months = now.getMonth() + 1;\r\n                let days = now.getDate();\r\n                setEndMonth(months + '-' + days);\r\n            }, 300);\r\n        };\r\n\r\n        // '시간' 마감 생성 기능\r\n        function settingEndHours() {\r\n            setInterval(function () {\r\n                let now = new Date();\r\n                let hours = now.getHours();\r\n                let minutes = now.getMinutes();\r\n                let seconds = now.getSeconds();\r\n                setEndHours(hours + ':' + minutes + ':' + seconds);\r\n            }, 300);\r\n        };\r\n\r\n        // 일자 생성 기능 통합\r\n        function showCreateSendSingalPage() {\r\n            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n            settingStartMonth();\r\n            settingStartHours();\r\n            settingEndtMonth();\r\n            settingEndHours();\r\n        };\r\n\r\n        // (팝업) 행성 개설 안내 비활성화 기능\r\n        function fadeCreateSendSingalPage() {\r\n            const originalUserNickname = String(userData.nickname);\r\n            const originalUserNicknameLength = Number(userData.nickname.length);\r\n            setStringUserNickname(originalUserNickname);\r\n            setLengthUserNickname(originalUserNicknameLength);\r\n            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n        };\r\n\r\n        // 사용자 행성 생성 정보 전달 기능\r\n        async function sendSignal_confirm() {\r\n            // 사용자 개설일 정보 전달 기능\r\n            await fetch(`${process.env.REACT_APP_REGISTER_OPENDATE}`, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userID)\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    // 개설 시간을 10분 후로 설정\r\n                    const now = new Date();\r\n                    now.setMinutes(now.getMinutes() + 10);\r\n                    const finalDate = Number(now.getTime());\r\n                    dispatch({ type: 'CHANGE_OPENDATE', data: finalDate });\r\n                    // \r\n                    // const now = new Date();\r\n                    // now.setDate(now.getDate() + 10);\r\n                    // const finalDate = Number(now.getTime());\r\n                    // dispatch({ type: 'CHANGE_OPENDATE', data: finalDate });\r\n                    // \r\n                    // 사용자 별명 정보 전달 기능\r\n                    fetch(`${process.env.REACT_APP_REGISTER_NICKNAME}${userID}/`, {\r\n                        method: 'PATCH',\r\n                        mode: 'cors',\r\n                        cache: 'no-cache',\r\n                        credentials: 'same-origin',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(String(stringUserNickname))\r\n                    })\r\n                        .then((res) => {\r\n                            if (!res.ok) {\r\n                                throw new Error();\r\n                            };\r\n                            dispatch({ type: 'CHANGE_USERNICKNAME', data: stringUserNickname });\r\n                            dispatch({ type: 'CHANGE_ISSENDSIGNAL', data: !isSendSignal });\r\n                            dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                            dispatch({ type: 'CHANGE_ISYESNAME', data: true });\r\n                        })\r\n                        .catch((error) => {\r\n                            setStartBtn(true);\r\n                            alert('서버가 불안정 하여 행성 개설(행성 이름)에 실패했습니다. 다시 시도해주세요.');\r\n                            fadeCreateSendSingalPage();\r\n                        })\r\n                })\r\n                .catch((error) => {\r\n                    setStartBtn(true);\r\n                    alert('서버가 불안정 하여 행성 개설(개설 일자)에 실패했습니다. 다시 시도해주세요.');\r\n                    fadeCreateSendSingalPage();\r\n                });\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PopUpOpenPlanet></PopUpOpenPlanet>\r\n                <PopUpOpenPlanetNoName></PopUpOpenPlanetNoName>\r\n                <div className='noname_outContainer'>\r\n                    <p>아직 신호를 보내지</p>\r\n                    <p>않았습니다.</p>\r\n                    <div className='noname_sendSignal' onClick={showCreateSendSingalPage}>신호 보내기</div>\r\n                    <div className={isSendSignal ? \"noname_sendSignal_outContainer\" : \"noname_sendSignal_outContainer_fade\"}>\r\n                        <div className='noname_sendSignal_innerTitle'>\r\n                            <img alt='back_icon' className='noname_sendSignal_innerTitle_backIcon' src='https://github.com/Lee-Seung-Wook/Angelo-s_Library/blob/main/lib/icon/back.png?raw=true' onClick={fadeCreateSendSingalPage}></img>\r\n                            <p className='noname_sendSignal_innerTitle_p'>안녕하세요.\r\n                                <br></br>\r\n                                제 이름은...\r\n                            </p>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerName'>\r\n                            <p className='noname_sendSignal_innerName_p'>행성의 이름</p>\r\n                            <input id='input_userName' maxLength={10} onChange={(e) => {\r\n                                setLengthUserNickname(e.target.value.length);\r\n                                setStringUserNickname(e.target.value);\r\n                            }} value={stringUserNickname}></input><span className='inputUserNameLength'>{lengthUserNickname}/10</span>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerTime'>\r\n                            <p className='noname_sendSignal_innerTime_p'>시작 & 마감</p>\r\n                            <h6 className='noname_sendSignal_innerTime_h6'>10일 동안 편지를 받을 수 있습니다.</h6>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerTime_view'>\r\n                            <div className='noname_sendSignal_innerTime_view_start'>\r\n                                <div className='noname_sendSignal_innerTime_view_bolt_div'>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_1'></div>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_2'></div>\r\n                                </div>\r\n                                <p className='noname_sendSignal_innerTime_view_p'>Start</p>\r\n                                <p className='noname_sendSignal_innerTime_view_month'>{startMonth}</p>\r\n                                <p className='noname_sendSignal_innerTime_view_hours'>{startHours}</p>\r\n                            </div>\r\n                            <div className='noname_sendSignal_innerTime_view_pause'></div>\r\n                            <div className='noname_sendSignal_innerTime_view_end'>\r\n                                <div className='noname_sendSignal_innerTime_view_bolt_div'>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_1'></div>\r\n                                    <div className='noname_sendSignal_innerTime_view_bolt_2'></div>\r\n                                </div>\r\n                                <p className='noname_sendSignal_innerTime_view_p'>End</p>\r\n                                <p className='noname_sendSignal_innerTime_view_month'>{endMonth}</p>\r\n                                <p className='noname_sendSignal_innerTime_view_hours'>{endHours}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className='noname_sendSignal_innerNotice'>\r\n                        </div>\r\n                        <div className='noname_sendSignal_startDiv'>\r\n                            <div className={startBtn ? 'noname_sendSignal_startDiv_button' : 'noname_sendSignal_startDiv_button_fade'} onClick={\r\n                                () => {\r\n                                    if (lengthUserNickname === 0) {\r\n                                        setIsPopUpOpenPlanetName(!isPopUpOpenPlanetName);\r\n                                    } else {\r\n                                        setIsPopUpOpenPlanet(!isPopUpOpenPlanet);\r\n                                    };\r\n                                }}>시작하기</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // (팝업) 행성 개설 완료 안내\r\n    function CreateNameURL() {\r\n        // 공유 가능한 사용자 아이디 요청 기능\r\n        function RequestShareUserIDforUrlCopy() {\r\n            fetch(`${process.env.REACT_APP_SHARE_USERID}${userID}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((userData) => {\r\n                    dispatch({ type: 'CHANGE_SHAREUSERID', data: String(userData) });\r\n                })\r\n                .catch((error) => {\r\n                    alert('정상적으로 공유 가능한 사용자 링크를 받아오지 못했습니다. 공유하기 버튼을 이용해주세요.');\r\n                    dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                });\r\n        };\r\n        // 사용자 공유 URL 제작 기능\r\n        function urlCopy() {\r\n            RequestShareUserIDforUrlCopy();\r\n            setTimeout(() => {\r\n                let Dummy_Tag = document.createElement(\"input\");\r\n                let Current_URL = `${process.env.REACT_APP_BASIC_URL2}userID=${ShareUserID}`;\r\n                document.body.appendChild(Dummy_Tag);\r\n                Dummy_Tag.value = Current_URL;\r\n                Dummy_Tag.select();\r\n                document.execCommand(\"copy\");\r\n                document.body.removeChild(Dummy_Tag);\r\n                dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl });\r\n                dispatch({ type: 'CHANGE_ISPOPUPCOPYLINK', data: !isPopUpCopyLink });\r\n            }, 100);\r\n        };\r\n        // (팝업) 링크 복사\r\n        function PopUpCopyLink() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isPopUpCopyLink ? \"isPopupCopyLink\" : \"isPopupCopyLink_fade\"}>\r\n                        <div className='isPopupCopyLink_outContainer'>\r\n                            <p className='isPopupCopyLink_title'>신호 복사 완료!</p>\r\n                            <p className='isPopupCopyLink_p'>링크가 복사 되었어요.</p>\r\n                            <div className='isPopupCopyLink_button_signOut' onClick={() => { dispatch({ type: 'CHANGE_ISPOPUPCOPYLINK', data: !isPopUpCopyLink }); }}>확인</div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PopUpCopyLink></PopUpCopyLink>\r\n                <div className={ModalCreateUrl ? \"yesNameUrl\" : \"yesNameUrl_fade\"}>\r\n                    <div className='yesNameUrl_outContainer'>\r\n                        <p className='yesNameUrl_title'>행성 개설 완료!</p>\r\n                        <p className='yesNameUrl_p'>행성 개설이 완료되었습니다.</p>\r\n                        <p className='yesNameUrl_p'>신호를 공유해 편지를 받아보세요.</p>\r\n                        <div className='yesNameUrl_innerBox'>\r\n                            <div className='yesNameUrl_button_signOut' onClick={() => { dispatch({ type: 'CHANGE_MODALCREATEURL', data: !ModalCreateUrl }); }}>확인</div>\r\n                            <div className='yesNameUrl_button_cancel' onClick={urlCopy}>신호 복사하기</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // 기존 사용자 용 Component\r\n    function ShowMemberInf() {\r\n        // 사용자 남은 시간 표현 기능\r\n        const [Dday, setDday] = useState(Number(userData.openDate));\r\n        const setDDay = useCallback(() => {\r\n            let count = setInterval(function () {\r\n                let now = new Date().getTime();\r\n                let distance = Dday - now;\r\n                let days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n                let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n                let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n                let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n                setDday(days + ' 일 ' + hours + ' : ' + minutes + ' : ' + seconds);\r\n                if (distance < 0) {\r\n                    clearInterval(count);\r\n                    dispatch({ type: 'CHANGE_ISSHAREBT', data: false });\r\n                    dispatch({ type: 'CHANGE_ISSHARE', data: false });\r\n                    dispatch({ type: 'CHANGE_ISRESTART', data: true });\r\n                    dispatch({ type: 'CHANGE_ISYESNAME', data: false });\r\n                    setDday(\"만료된 행성\");\r\n                };\r\n            }, 0);\r\n        }, [Dday]);\r\n\r\n        // (랜더링 직후)\r\n        useEffect(() => {\r\n            setDDay();\r\n        }, []);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='yesname_outContainer'>\r\n                    <h3><span>{userData.nickname}</span></h3>\r\n                    <div className={isYesName ? '' : 'yesname_outContainer_div_fade'}>\r\n                        <Refresh></Refresh>\r\n                        <h4>남은 시간</h4>\r\n                    </div>\r\n                    <h4 className={isYesName ? '' : 'h4_new'} >{Dday}</h4>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    // 편지 박스 Component\r\n    function LetterBox() {\r\n        const isNotYetLetter = useSelector((state) => state.isNotYetLetter);\r\n        const isLetterBlockConfirm = useSelector((state) => state.isLetterBlockConfirm);\r\n        const isLetter = useSelector((state) => state.isLetter);\r\n        const [list, setList] = useState([<span key={1} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list2, setList2] = useState([<span key={2} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list3, setList3] = useState([<span key={3} style={{ color: \"white\" }}>Loading...</span>]);\r\n        const [list4, setList4] = useState([<span key={4} style={{ color: \"white\" }}>Loading...</span>]);\r\n\r\n        // 편지 박스 위치 설정 기능\r\n        function setSlickPageNum(i) {\r\n            if (i <= 8) {\r\n                setSlickPage(0);\r\n            } else if (i >= 9 && i <= 17) {\r\n                setSlickPage(1);\r\n            } else if (i >= 18 && i <= 26) {\r\n                setSlickPage(2);\r\n            } else if (i >= 27 && i <= 35) {\r\n                setSlickPage(3);\r\n            };\r\n        };\r\n\r\n        // (팝업) 편지 차단\r\n        function LetterBlockConfirm() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isLetterBlockConfirm ? \"isLetterBlockConfirm\" : \"isLetterBlockConfirm_fade\"}>\r\n                        <div className='isLetterBlockConfirm_outContainer'>\r\n                            <p className='isLetterBlockConfirm_title'>이 편지를</p>\r\n                            <p className='isLetterBlockConfirm_title'>차단하겠습니까?</p>\r\n                            <p className='isLetterBlockConfirm_p'>차단된 편지는 다시 읽을 수 없고</p>\r\n                            <p className='isLetterBlockConfirm_p'>서비스질 개선에 사용됩니다.</p>\r\n                            <div className='isLetterBlockConfirm_innerBox'>\r\n                                <div className='isLetterBlockConfirm_button_signOut' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: false });\r\n                                }}>취소</div>\r\n                                <div className='isLetterBlockConfirm_button_cancel' onClick={() => {\r\n                                    letterBlcok(render);\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: false });\r\n                                }}>차단하기</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // 편지 차단 기능(1)\r\n        function letterBlcok(i) {\r\n            const copyLetter = [...letterData];\r\n            copyLetter[i].letterIcon = 'block';\r\n            dispatch({ type: 'CHANGE_LETTERDATA', data: copyLetter });\r\n            dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n            setRender(-1);\r\n            shareLetterBlock(i);\r\n        };\r\n\r\n        // 편지 차단 기능(2)\r\n        function shareLetterBlock(i) {\r\n            fetch(`${process.env.REACT_APP_REGISTER_BLOCK}${String(letterData[i].letterId)}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                })\r\n                .catch((error) => {\r\n                    alert('편지 차단이 정상적으로 진행되지 않았습니다. 다시 시도해주세요.');\r\n                });\r\n        };\r\n\r\n        // 편지지 기본 설정 초기화 기능\r\n        function resetLetterStyle() {\r\n            let newStyle = { ...setStyle };\r\n            newStyle['fontFamily'] = '';\r\n            newStyle['textAlign'] = '';\r\n            newStyle['fontSize'] = '';\r\n            newStyle['color'] = '';\r\n            newStyle['backgroundImage'] = '';\r\n            setSetStyle(newStyle);\r\n        };\r\n\r\n        // 편지지 설정 변경 기능\r\n        async function changeLetterStyle(i, newLetterData) {\r\n            let newStyle = { ...setStyle };\r\n            newStyle['fontFamily'] = newLetterData[i].letterFont;\r\n            newStyle['textAlign'] = newLetterData[i].letterTextAlign;\r\n            newStyle['fontSize'] = newLetterData[i].letterFontSize;\r\n            newStyle['color'] = newLetterData[i].letterFontColor;\r\n            newStyle['backgroundImage'] = newLetterData[i].letterPaper;\r\n            setSetStyle(newStyle);\r\n        };\r\n\r\n        // 편지 내용 삽입 및 타이핑 효과 기능\r\n        function enterDesc(i, checkTyping, newLetterData) {\r\n            if (checkTyping === false) {\r\n                let copyText = [newLetterData[i].letterContent];\r\n                let enterText = document.querySelector('.textbox');\r\n                let typingBool = false;\r\n                let typingIdx = 0;\r\n                let liIndex = 0;\r\n                setTimeout(() => {\r\n                    let arrayData = copyText[Object.keys(copyText)[liIndex]];\r\n                    let arraySplitData = arrayData.split('');\r\n                    let liLength = copyText.length;\r\n                    if (typingBool === false) {\r\n                        typingBool = true;\r\n                        var tyInt = setInterval(typing, 150);\r\n                    } function typing() {\r\n                        if (typingIdx < arrayData.length + 1) {\r\n                            enterText.value = arrayData.slice(undefined, typingIdx);\r\n                            typingIdx++;\r\n                        } else {\r\n                            if (liIndex < liLength - 1) {\r\n                                liIndex++;\r\n                                typingIdx = 0;\r\n                                typingBool = false;\r\n                                arrayData = copyText[Object.keys(copyText)[liIndex]]\r\n                                arraySplitData = arrayData.split('');\r\n                                clearInterval(tyInt);\r\n                                setTimeout(function () {\r\n                                    tyInt = setInterval(typing, 150);\r\n                                }, 250);\r\n                            } else if (liIndex === liLength - 1) {\r\n                                clearInterval(tyInt);\r\n                                copyText.splice(0, 1);\r\n                                typingBool = false;\r\n                                typingIdx = 0;\r\n                                liIndex = 0;\r\n                            };\r\n                        };\r\n                    };\r\n                }, 250);\r\n                // let copyText = letterData[i].letterContent;\r\n                // let content = document.querySelector('.textbox');\r\n                // new Typewriter(content, {\r\n                //     strings: copyText,\r\n                //     autoStart: true\r\n                // });\r\n            } else {\r\n                let copyText = newLetterData[i].letterContent;\r\n                let enterText = document.querySelector('.textbox');\r\n                enterText.value = copyText;\r\n            };\r\n        };\r\n\r\n        // 작성자 추가 기능\r\n        function enterAuthor(i, newLetterData) {\r\n            let copyAuthor = `${newLetterData[i].letterWriter}`;\r\n            let enterAuthor = document.querySelector('.author');\r\n            enterAuthor.value = copyAuthor;\r\n        };\r\n\r\n        // 스티커 추가 기능\r\n        function attach(i, checkTyping, newLetterData) {\r\n            function setTranslate(xPos, yPos, el) {\r\n                el.style.transform = \"translate3d(\" + xPos + \"px, \" + yPos + \"px, 0)\";\r\n            };\r\n            let copyStrickerArray = newLetterData[i].sticker;\r\n            for (let i = 0; i < copyStrickerArray.length; i++) {\r\n                let item = document.createElement('div');\r\n                let stage = document.querySelector('.letter_textarea');\r\n                item.setAttribute('id', '_' + copyStrickerArray[i].stickerId);\r\n                item.setAttribute('class', 'item' + copyStrickerArray[i].stickerIcon);\r\n                stage.appendChild(item);\r\n                setTranslate(Math.round(Number(copyStrickerArray[i].stickerX)), Math.round((Number(copyStrickerArray[i].stickerY))), item);\r\n            };\r\n            enterDesc(i, checkTyping, newLetterData);\r\n            enterAuthor(i, newLetterData);\r\n        };\r\n\r\n        // 편지 열기 기능\r\n        async function openLetter(i) {\r\n            setRender(i);\r\n            dispatch({ type: 'CHANGE_ISSHAREBT', data: false });\r\n            let now = new Date().getTime();\r\n            let distance = userData.openDate - now;\r\n            if (distance <= 0) {\r\n                dispatch({ type: 'CHANGE_ISLETTER', data: true });\r\n                setSlickPageNum(i);\r\n                await RequestThisLetterData(i);\r\n            } else {\r\n                dispatch({ type: 'CHANGE_ISNOTYETLETTER', data: true });\r\n            };\r\n        };\r\n\r\n        // 편지 정보 요청 기능\r\n        async function RequestThisLetterData(i) {\r\n            let newEachLetter = null;\r\n            if (letterData[i].userId === '') {\r\n                let eachLetter = {};\r\n                await fetch(`${process.env.REACT_APP_LETTER_DATA}${String(letterData[i].letterId)}`, {\r\n                    method: 'GET',\r\n                    mode: 'cors',\r\n                    cache: 'no-cache',\r\n                    credentials: 'same-origin',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(res => {\r\n                        if (!res.ok) {\r\n                            throw new Error();\r\n                        };\r\n                        return res.json();\r\n                    })\r\n                    .then((data) => {\r\n                        newEachLetter = Object.assign(eachLetter, data);\r\n                        stickerSum(i, newEachLetter);\r\n                    })\r\n                    .catch((error) => {\r\n                        alert('편지 내용을 정상적으로 받아오지 못했습니다. 다시 편지를 열어주세요.');\r\n                        dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                    });\r\n                // await stickerSum(i, newEachLetter);\r\n            };\r\n            checkLoad(i, letterData);\r\n        };\r\n\r\n        // 편지 정보와 스티커 정보를 병합하는 기능\r\n        async function stickerSum(i, newEachLetter) {\r\n            const newLetterData = [...letterData];\r\n            const originalCheckTyping = letterData[i].letterReadYn;\r\n            await fetch(`${process.env.REACT_APP_STICKER_DATA}${String(letterData[i].letterId)}`, {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (!res.ok) {\r\n                        throw new Error();\r\n                    };\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    newEachLetter.sticker = data;\r\n                    newLetterData[i] = newEachLetter;\r\n                    dispatch({ type: 'CHANGE_LETTERDATA', data: newLetterData });\r\n                    checkLoad(i, newLetterData, originalCheckTyping);\r\n                })\r\n                .catch((error) => {\r\n                    alert('편지 내 스티커 정보를 정상적으로 받아오지 못했습니다. 다시 편지를 열어주세요.');\r\n                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                });\r\n            // await checkLoad(i, newLetterData, originalCheckTyping);\r\n        };\r\n\r\n        // 편지지 로드 확인 기능\r\n        async function checkLoad(i, newLetterData, originalCheckTyping) {\r\n            let src = newLetterData[i].letterPaper.replace(/^url\\(['\"](.+)['\"]\\)/, '$1');\r\n            let image = new Image();\r\n            image.addEventListener('load', async function () {\r\n                dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: false });\r\n                // dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: !isImagePreload });\r\n                let checkTyping = originalCheckTyping;\r\n                await changeLetterStyle(i, newLetterData);\r\n                setTimeout(() => {\r\n                    attach(i, checkTyping, newLetterData);\r\n                }, 100);\r\n            });\r\n            image.src = src;\r\n        };\r\n\r\n        let settings = {\r\n            initialSlide: slickPage,\r\n            draggable: false,\r\n            swipe: true,\r\n            arrows: false,\r\n            dots: true,\r\n            infinite: true,\r\n            speed: 1250,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1\r\n        };\r\n\r\n        // (랜더링 직후) 편지 배열 표현 기능\r\n        useEffect(() => {\r\n            const list = [];\r\n            const list2 = [];\r\n            const list3 = [];\r\n            const list4 = [];\r\n\r\n            if (letterData.length === 0) {\r\n                setList(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList2(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n            } else if (letterData.length <= 9) {\r\n                for (let i = 0; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                    setList2(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 18) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                    setList3(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 27) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < 18; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                };\r\n                for (let i = 18; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list3.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList3(list3);\r\n                    setList4(<span><div className='letterEmptyIcon'></div><span>아직 편지가</span><br></br><br></br><span>도착하지 않았어요.</span></span>);\r\n                };\r\n            } else if (letterData.length <= 36) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    let li = letterData[i];\r\n                    list.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList(list);\r\n                };\r\n                for (let i = 9; i < 18; i++) {\r\n                    let li = letterData[i];\r\n                    list2.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList2(list2);\r\n                };\r\n                for (let i = 18; i < 27; i++) {\r\n                    let li = letterData[i];\r\n                    list3.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList3(list3);\r\n                };\r\n                for (let i = 27; i < letterData.length; i++) {\r\n                    let li = letterData[i];\r\n                    list4.push(React.Children.toArray(<button key={li.letterId} data-id={li.letterId} className={\"letter\" + li.letterIcon} onClick={() => { openLetter(i) }}><div className={li.letterReadYn ? 'new_letter_icon_open' : 'new_letter_icon'}></div></button>));\r\n                    setList4(list4);\r\n                };\r\n            } else {\r\n            };\r\n        }, []);\r\n\r\n        // (팝업) 편지지\r\n        function Letter() {\r\n            // 카카오 애드 관련 기능\r\n            useEffect(() => {\r\n                let ins = document.createElement('ins');\r\n                let scr = document.createElement('script');\r\n                ins.className = 'kakao_ad_area';\r\n                ins.style = \"display:none; width:100%;\";\r\n                scr.async = 'true';\r\n                scr.type = \"text/javascript\";\r\n                scr.src = \"//t1.daumcdn.net/kas/static/ba.min.js\";\r\n                ins.setAttribute('data-ad-width', '320');\r\n                ins.setAttribute('data-ad-height', '100');\r\n                // ins.setAttribute('data-ad-unit', 'DAN-sM3Zwb7Z4mDxmKEl');\r\n                ins.setAttribute('data-ad-unit', 'DAN-ynvjcyFHlXsbbDzL');\r\n                document.querySelector('.adfit').appendChild(ins);\r\n                document.querySelector('.adfit').appendChild(scr);\r\n            }, [])\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isLetter ? 'letter_outContainer' : 'letter_outContainer_fade'}>\r\n                        <div className='letter_textarea_top'>\r\n                            <div className='letter_textarea_author_title'>From.</div>\r\n                            <input type='text' className='author' value={''} readOnly></input>\r\n                            <div className='letter_icon_box'>\r\n                                <div className='letter_block' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTERBLOCKCONFIRM', data: true });\r\n                                    dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: !isImagePreload });\r\n                                    resetLetterStyle();\r\n                                }}></div>\r\n                                <div className='letter_close' onClick={() => {\r\n                                    dispatch({ type: 'CHANGE_ISLETTER', data: false });\r\n                                    dispatch({ type: 'CHANGE_ISIMAGEPRELOAD', data: !isImagePreload });\r\n                                    resetLetterStyle();\r\n                                }}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"letter_textarea\">\r\n                            {/* <div style={setStyle} className=\"textbox\" value={''} readOnly>\r\n                            </div> */}\r\n                            <textarea style={setStyle} className=\"textbox\" value={''} readOnly>\r\n                            </textarea>\r\n                            <span className={isImagePreload ? 'preloading' : 'preloading_fade'}>편지를 불러오고 있습니다...</span>\r\n                        </div>\r\n                        <br></br>\r\n                        <div className=\"adfit\"></div>\r\n                        <div className='googleAdsense'>\r\n                            <Adsense\r\n                                client={process.env.REACT_APP_GOOGLE_ADSENSE}\r\n                                slot={process.env.REACT_APP_GOOGLE_ADSENSE_SLOT}\r\n                                style={{ display: 'block' }}\r\n                                layout=\"in-article\"\r\n                                format=\"fluid\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        // (팝업) 편지를 읽지 못함을 알리는 안내\r\n        function NotYetLetter() {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={isNotYetLetter ? \"isNotYetLetter\" : \"isNotYetLetter_fade\"}>\r\n                        <div className='isNotYetLetter_outContainer'>\r\n                            <p className='isNotYetLetter_title'>지구에서 편지가</p>\r\n                            <p className='isNotYetLetter_title'>오고 있습니다.</p>\r\n                            <p className='isNotYetLetter_p'>남은 시간이 모두 지나면</p>\r\n                            <p className='isNotYetLetter_p'>열어 볼 수 있어요.</p>\r\n                            <div className='isNotYetLetter_button_signOut' onClick={() => {\r\n                                dispatch({ type: 'CHANGE_ISNOTYETLETTER', data: false });\r\n                            }}>확인</div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NotYetLetter></NotYetLetter>\r\n                <LetterBlockConfirm></LetterBlockConfirm>\r\n                <Letter></Letter>\r\n                <div className='letterBox_outContainer'>\r\n                    <Slider {...settings}>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list2}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list3}\r\n                            </div>\r\n                        </div>\r\n                        <div className='letterBox_innerContainer'>\r\n                            <div className='letterBox_innerContainer_div'>{list4}\r\n                            </div>\r\n                        </div>\r\n                    </Slider>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ShareBt></ShareBt>\r\n            {isNamePage ? <ShowMemberInf></ShowMemberInf> : <SetSignal></SetSignal>}\r\n            {isRestart ? <Restart></Restart> : <span></span>}\r\n            {isNamePage ? <LetterBox></LetterBox> : <span></span>}\r\n            <CreateNameURL></CreateNameURL>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default InnerPage;","C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Menu.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\ShareBt.js",["91"],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Restart.js",[],[],"C:\\Users\\blue_\\OneDrive\\바탕 화면\\GitHub\\soso-web\\main\\src\\components\\Refresh.js",[],[],{"ruleId":"92","severity":1,"message":"93","line":50,"column":6,"nodeType":"94","endLine":50,"endColumn":25,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":43,"column":6,"nodeType":"94","endLine":43,"endColumn":16,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"98","line":54,"column":8,"nodeType":"94","endLine":54,"endColumn":27,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"100","line":213,"column":8,"nodeType":"94","endLine":213,"endColumn":10,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":129,"column":8,"nodeType":"94","endLine":129,"endColumn":10,"suggestions":"103"},{"ruleId":"92","severity":1,"message":"104","line":586,"column":12,"nodeType":"94","endLine":586,"endColumn":14,"suggestions":"105"},{"ruleId":"92","severity":1,"message":"106","line":763,"column":8,"nodeType":"94","endLine":763,"endColumn":43,"suggestions":"107"},{"ruleId":"92","severity":1,"message":"108","line":786,"column":8,"nodeType":"94","endLine":786,"endColumn":19,"suggestions":"109"},{"ruleId":"92","severity":1,"message":"110","line":405,"column":12,"nodeType":"94","endLine":405,"endColumn":14,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":536,"column":25,"nodeType":"114","messageId":"115","endLine":536,"endColumn":39},{"ruleId":"92","severity":1,"message":"116","line":786,"column":12,"nodeType":"94","endLine":786,"endColumn":14,"suggestions":"117"},{"ruleId":"92","severity":1,"message":"118","line":18,"column":8,"nodeType":"94","endLine":18,"endColumn":37,"suggestions":"119"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'isFirstInfo'. Either include them or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has missing dependencies: 'isStory', 'navigater', and 'userID'. Either include them or remove the dependency array.",["121"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isSecondInfo'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'RequestUserData', 'dispatch', 'name', 'nameErro', and 'navigater'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'stickerNUM'. Either include it or remove the dependency array.",["124"],"React Hook useEffect has a missing dependency: 'checkLetterData'. Either include it or remove the dependency array.",["125"],"React Hook useEffect has a missing dependency: 'firstCheck'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isThirdInfo'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'setDDay'. Either include it or remove the dependency array.",["128"],"no-unused-vars","'arraySplitData' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'openLetter'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'isShare'. Either include it or remove the dependency array.",["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [dispatch, isFirstInfo, navigater, userID]",{"range":"153","text":"154"},"Update the dependencies array to be: [dispatch, isStory, navigater, userID]",{"range":"155","text":"156"},"Update the dependencies array to be: [dispatch, isSecondInfo, navigater, userID]",{"range":"157","text":"158"},"Update the dependencies array to be: [RequestUserData, dispatch, name, nameErro, navigater]",{"range":"159","text":"160"},"Update the dependencies array to be: [stickerNUM]",{"range":"161","text":"162"},"Update the dependencies array to be: [checkLetterData]",{"range":"163","text":"164"},"Update the dependencies array to be: [firstCheck, openUserOpenDate, userLetterCount]",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, get_query, isThirdInfo]",{"range":"167","text":"168"},"Update the dependencies array to be: [setDDay]",{"range":"169","text":"170"},"Update the dependencies array to be: [openLetter]",{"range":"171","text":"172"},"Update the dependencies array to be: [dispatch, isShare, userData.openDate]",{"range":"173","text":"174"},[1844,1863],"[dispatch, isFirstInfo, navigater, userID]",[1357,1367],"[dispatch, isStory, navigater, userID]",[2127,2146],"[dispatch, isSecondInfo, navigater, userID]",[7982,7984],"[RequestUserData, dispatch, name, nameErro, navigater]",[4887,4889],"[stickerNUM]",[28052,28054],"[checkLetterData]",[35371,35406],"[firstCheck, openUserOpenDate, userLetterCount]",[36147,36158],"[dispatch, get_query, isThirdInfo]",[20203,20205],"[setDDay]",[39822,39824],"[openLetter]",[763,792],"[dispatch, isShare, userData.openDate]"]